# ================================
# 阶段1: Maven依赖缓存阶段
# ================================
FROM ubuntu:22.04 AS maven-cache

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV MAVEN_HOME=/usr/share/maven
ENV MAVEN_CONFIG=/root/.m2

# 安装构建依赖
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk \
    maven \
    && rm -rf /var/lib/apt/lists/*

# 设置工作目录
WORKDIR /app

# 创建Maven设置文件以加速下载
RUN mkdir -p /root/.m2 && \
    echo '<?xml version="1.0" encoding="UTF-8"?>' > /root/.m2/settings.xml && \
    echo '<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"' >> /root/.m2/settings.xml && \
    echo '          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' >> /root/.m2/settings.xml && \
    echo '          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">' >> /root/.m2/settings.xml && \
    echo '  <mirrors>' >> /root/.m2/settings.xml && \
    echo '    <mirror>' >> /root/.m2/settings.xml && \
    echo '      <id>aliyun-maven</id>' >> /root/.m2/settings.xml && \
    echo '      <mirrorOf>central</mirrorOf>' >> /root/.m2/settings.xml && \
    echo '      <name>Aliyun Maven</name>' >> /root/.m2/settings.xml && \
    echo '      <url>https://maven.aliyun.com/repository/central</url>' >> /root/.m2/settings.xml && \
    echo '    </mirror>' >> /root/.m2/settings.xml && \
    echo '  </mirrors>' >> /root/.m2/settings.xml && \
    echo '</settings>' >> /root/.m2/settings.xml

# 只复制pom.xml文件（这样只有pom.xml变化时才会重新下载依赖）
COPY pom.xml .

# 下载所有依赖到本地仓库
RUN mvn dependency:go-offline -B -q

# ================================
# 阶段2: 应用构建阶段
# ================================
FROM maven-cache AS builder

# 复制源代码
COPY src ./src

# 复制Docker环境配置文件，覆盖原有的application.yaml
COPY docker-application.yaml ./src/main/resources/application.yaml

# 构建应用（使用离线模式，因为依赖已经下载）
RUN mvn clean package -DskipTests -P jar -o -q

# ================================
# 阶段3: 运行时阶段
# ================================
FROM ubuntu:22.04 AS runtime

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV MYSQL_ROOT_PASSWORD=root123
ENV MYSQL_DATABASE=news
ENV MYSQL_USER=newsuser
ENV MYSQL_PASSWORD=news123

# 安装运行时依赖（只安装必需的包）
RUN apt-get update && apt-get install -y \
    openjdk-17-jre-headless \
    mysql-server \
    mysql-client \
    supervisor \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# 配置MySQL
RUN sed -i 's/bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf && \
    sed -i 's/^#max_connections.*/max_connections = 200/' /etc/mysql/mysql.conf.d/mysqld.cnf && \
    sed -i 's/^#innodb_buffer_pool_size.*/innodb_buffer_pool_size = 256M/' /etc/mysql/mysql.conf.d/mysqld.cnf

# 创建工作目录
WORKDIR /app

# 从构建阶段复制jar文件
COPY --from=builder /app/target/news-*.jar /app/news-app.jar

# 复制静态资源和模板
COPY src/main/webapp /app/static

# 复制配置文件
COPY docker-application.yaml /app/application.yaml
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY start.sh /app/start.sh

# 设置权限和创建必要目录
RUN chmod +x /app/start.sh && \
    mkdir -p /var/log/supervisor \
             /app/uploads \
             /app/WEB-INF/lucene \
             /var/run/mysqld && \
    chown mysql:mysql /var/run/mysqld

# 暴露端口
EXPOSE 80 3306

# 创建数据卷
VOLUME ["/var/lib/mysql", "/app/uploads", "/var/log"]

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# 启动服务
CMD ["/app/start.sh"]
